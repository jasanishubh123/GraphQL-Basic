        type Query {
            greeting(name: String , position:String):String!
            me: User!
            post(id:ID!):Post!
            sum(a:Float!,b:Float!):Float!
            grades:[String!]!
            allPost(query:String):[Post!]!
            myPost(query:String):[Post!]!
            allUser(query:String):[User!]!
            comments:[Comment!]!
        }

        type Mutation  {
            createUser(data:createUserInput):AuthPayload!
            createPost(data:createPostInput):Post!
            createComment(data:createCommentInput):Comment!
            deleteUser:User!
            deletePost(id:ID!):Post!
            deleteComment(id:ID!):Comment!
            updateUser(data:updateUserInput!):User!
            updatePost(id:ID!,data:updatePostInput!):Post!
            updateComment(id:ID!,text:String!):Comment!
            Login(data:LoginInput!):AuthPayload!
        }

        input LoginInput{
            email:String!
            password:String!
        }

        type Subscription{
            count:Int!
            comment(postId:ID!):CommentSubscriptionPayload!
            post:PostSubscriptionPayload!

            myPost:PostSubscriptionPayload!

        }

        input updatePostInput{
            title:String
            body:String
            published:Boolean
           
        }

        input createUserInput{
            name:String!
            email:String!
            password:String!
            
        }

         input updateUserInput{
            name:String
            email:String
            password:String
            
        }

        input createPostInput{
            title:String
            body:String!
            published:Boolean!
            
        }

        input createCommentInput{
            text:String!
            post:ID!
        }

        type User {  
            id:ID!
            name:String!
            email:String
            password:String!
            posts:[Post!]!
            comments:[Comment!]!

        }

        type Post {
            id:ID!
            title:String!
            body:String!
            published:Boolean!
            author:User!
            comments:[Comment!]!

        }

        type Comment {
            id:ID!
            text:String!
            author:User!
            post:Post!
        }

        type PostSubscriptionPayload{
            mutation:MutationType!,
            node:Post
        }

        type CommentSubscriptionPayload{
            mutation:MutationType!
            node:Comment
        }

        enum MutationType{
            CREATED
            UPDATED
            DELETED
        }

        type AuthPayload{
            token:String!
            user:User!
        }

       
